esphome:
  name: towelheater
  platform: ESP8266
  board: d1_mini
  on_boot:
    priority: -100
    then:
      - logger.log: "Done booting, running other code"
      - mqtt.publish:
          topic: towelheater/angery
          payload: 'very angery, rawr ü¶Å'
      - delay: 1s
      - if:
          condition:
            text_sensor.state:
              id: caffeine
              state: 'off'
          then:
            - lambda: |-
                ESP.deepSleep(uint64_t(60) * 1000000);

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: high
  domain: !secret wifi_domain
  fast_connect: true

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  safe_mode: false

time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0,30
        minutes: '*'
        then:
          - if:
              condition:
                text_sensor.state:
                  id: caffeine
                  state: 'off'
              then:
                # - mqtt.publish:
                #     topic: towelheater/status
                #     payload: offline
                #     retain: true
                - delay: 500ms
                - lambda: |-
                    ESP.deepSleep(uint64_t(60) * 1000000);

mqtt:
  broker: !secret mqtt_broker
  topic_prefix: towelheater
  keepalive: 5s

i2c:
  sda: D2
  scl: D1
  scan: True

text_sensor:
  - platform: mqtt_subscribe
    name: "Caffeine"
    internal: true
    id: caffeine
    topic: towelheater/caffeine

sensor:
  - platform: wifi_signal
    name: "Towel Heater RSSI"
    update_interval: 60s

  - platform: bme280
    temperature:
      name: "BME280 Bathroom Temperature"
      id: bme280_bathroom_temperature
    pressure:
      name: "BME280 Bathroom Pressure"
      id: bme280_bathroom_pressure
    humidity:
      name: "BME280 Bathroom Relative Humidity"
      id: bme280_bathroom_humidity
    address: 0x76
    update_interval: 15s

  - platform: template
    name: "BME280 Bathroom Absolute Humidity"
    unit_of_measurement: "g/m¬≥"
    lambda: |-
      const float mw = 18.01534;    // molar mass of water g/mol
      const float r = 8.31447215;   // Universal gas constant J/mol/K
      auto new_value = (6.112 * powf(2.718281828, (17.67 * id(bme280_bathroom_temperature).state) /
        (id(bme280_bathroom_temperature).state + 243.5)) * id(bme280_bathroom_humidity).state * mw) /
        ((273.15 + id(bme280_bathroom_temperature).state) * r); // in grams/m^3

      if (isnan(new_value)) {
          return {};
      } else {
          return new_value;
      }
    accuracy_decimals: 2
    update_interval: 5s

globals:
  - id: towel_heater_status
    type: bool
    initial_value: 'false'
    restore_value: true

switch:
  - platform: gpio
    pin: D6
    id: towel_heater_internal_switch

  - platform: template
    name: "Towel Heater"
    icon: mdi:car-defrost-rear
    discovery: false
    lambda: 'return id(towel_heater_status);'
    turn_on_action:
      - if:
          condition:
            lambda: 'return id(towel_heater_status) == false;'
          then:
            - lambda: 'id(towel_heater_status) = true;'
            - switch.turn_on: towel_heater_internal_switch
            - delay: 10ms
            - switch.turn_off: towel_heater_internal_switch
            - mqtt.publish:
                topic: towelheater/switch/towel_heater/command
                payload: ''
                retain: true
    turn_off_action:
      - if:
          condition:
            lambda: 'return id(towel_heater_status) == true;'
          then:
            - lambda: 'id(towel_heater_status) = false;'
            - switch.turn_on: towel_heater_internal_switch
            - delay: 10ms
            - switch.turn_off: towel_heater_internal_switch
            - mqtt.publish:
                topic: towelheater/switch/towel_heater/command
                payload: ''
                retain: true
