esphome:
  name: bedroom
  platform: ESP32
  board: lolin_d32_pro

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: !secret wifi_domain
  power_save_mode: light
  fast_connect: true

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

i2c:
  sda: 21
  scl: 22
  scan: True

globals:
  - id: samples
    type: float[10]
    restore_value: no
  - id: sample_count
    type: int
    restore_value: no
    initial_value: '0'

sensor:
  - platform: adc
    pin: 34
    name: "Bed Pressure"
    update_interval: 0.1s
    attenuation: 11db
    filters:
      # Discard top 20% and bottom 20% values, then calculate average of the remaining
      - lambda: >-
          if (isnan(x)) {
              return {};
          }

          const int max_samples = 10;
          const int discard_samples = 2;

          id(samples)[id(sample_count)++] = x;

          if (id(sample_count) == max_samples) {
              id(sample_count) = 0;

              // Clear the largest two values
              for (int j = 0; j < discard_samples; j++) {
                  auto target_index = 0;
                  // Find largest
                  for (int i = 0; i < max_samples; i++) {
                      if (id(samples)[i] >= id(samples)[target_index] && id(samples)[i] != -1.0f) {
                          target_index = i;
                      }
                  }
                  // Clear largest value
                  id(samples)[target_index] = -1.0f;
              }

              // Clear the smallest two values
              for (int j = 0; j < discard_samples; j++) {
                  auto target_index = 0;
                  // Find smallest
                  for (int i = 0; i < max_samples; i++) {
                      if (id(samples)[i] <= id(samples)[target_index] && id(samples)[i] != -1.0f) {
                          target_index = i;
                      }
                  }
                  // Clear largest value
                  id(samples)[target_index] = -1.0f;
              }

              auto average = 0.0f;
              for (int i = 0; i < max_samples; i++) {
                  if (id(samples)[i] != -1.0f) {
                      average += id(samples)[i];
                  }
              }
              average /= static_cast<float>(max_samples - discard_samples * 2);
              return average;
          } else {
              return {};
          }

  - platform: bme280
    temperature:
      name: "BME280 Bedroom Temperature"
      id: bme280_bedroom_temperature
    pressure:
      name: "BME280 Bedroom Pressure"
      id: bme280_bedroom_pressure
    humidity:
      name: "BME280 Bedroom Relative Humidity"
      id: bme280_bedroom_humidity
    address: 0x76
    update_interval: 15s

  - platform: template
    name: "BME280 Bedroom Absolute Humidity"
    lambda: |-
      const float mw = 18.01534;    // molar mass of water g/mol
      const float r = 8.31447215;   // Universal gas constant J/mol/K
      return (6.112 * powf(2.718281828, (17.67 * id(bme280_bedroom_temperature).state) /
        (id(bme280_bedroom_temperature).state + 243.5)) * id(bme280_bedroom_humidity).state * mw) /
        ((273.15 + id(bme280_bedroom_temperature).state) * r); // in grams/m^3
    accuracy_decimals: 2
